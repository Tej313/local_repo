# Import the necessary module from nltk
import nltk
# Import the state_union corpus from nltk
from nltk.corpus import state_union
# Import the PunktSentenceTokenizer from nltk.tokenize module
from nltk.tokenize import PunktSentenceTokenizer

'''
POS tag list:

CC	coordinating conjunction
CD	cardinal digit
DT	determiner
EX	existential there (like: "there is" ... think of it like "there exists")
FW	foreign word
IN	preposition/subordinating conjunction
JJ	adjective	'big'
JJR	adjective, comparative	'bigger'
JJS	adjective, superlative	'biggest'
LS	list marker	1)
MD	modal	could, will
NN	noun, singular 'desk'
NNS	noun plural	'desks'
NNP	proper noun, singular	'Harrison'
NNPS	proper noun, plural	'Americans'
PDT	predeterminer	'all the kids'
POS	possessive ending	parent\'s
PRP	personal pronoun	I, he, she
PRP$	possessive pronoun	my, his, hers
RB	adverb	very, silently,
RBR	adverb, comparative	better
RBS	adverb, superlative	best
RP	particle	give up
TO	to	go 'to' the store.
UH	interjection	errrrrrrrm
VB	verb, base form	take
VBD	verb, past tense	took
VBG	verb, gerund/present participle	taking
VBN	verb, past participle	taken
VBP	verb, sing. present, non-3d	take
VBZ	verb, 3rd person sing. present	takes
WDT	wh-determiner	which
WP	wh-pronoun	who, what
WP$	possessive wh-pronoun	whose
WRB	wh-abverb	where, when
'''

# Load the training text from the state_union corpus
train_text = state_union.raw("2005-GWBush.txt")
# Load the sample text from the state_union corpus
sample_text = state_union.raw("2006-GWBush.txt")

# Initialize a custom sentence tokenizer with the training text
custom_sent_tokenizer = PunktSentenceTokenizer(train_text)

# Tokenize the sample text into sentences using the custom sentence tokenizer
tokenized = custom_sent_tokenizer.tokenize(sample_text)

# Define a function to process the content
def process_content():
    try:
        # Iterate over each sentence in the tokenized text
        for i in tokenized[5:]:
            # Tokenize each sentence into words
            words = nltk.word_tokenize(i)
            # Perform part-of-speech tagging on the words
            tagged = nltk.pos_tag(words)
            namedEnt=nltk.ne_chunk(tagged,binary=True)
            namedEnt.draw()

            
    except Exception as e:
        # Print any errors that occur
        print(str(e))

# Call the function to process the content
process_content()
